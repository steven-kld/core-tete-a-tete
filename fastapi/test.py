# from handlers import send_bot_alert
# from models import MessageRequest
# from datetime import datetime

# test_message = MessageRequest(
#     id=66539,
#     created_at=datetime.fromisoformat("2025-07-22 08:57:56.517"),
#     processed=True,
#     makes_sense=True,
#     flags=["–¢—É—Ä–∏–∑–º, —ç–∫—Å–∫—É—Ä—Å–∏–∏, —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –≤–æ–¥–∏—Ç–µ–ª—å"],
#     group_link="https://t.me/health_ge",
#     group_name="–ú–µ–¥–∏—Ü–∏–Ω–∞ üíä –ì—Ä—É–∑–∏—è",
#     tg_user_id=240046008,
#     tg_user_name="q_pokrovsky",
#     msg="Hi this is my msg",
#     app_url="tg://user?id=240046008",
#     generic_title="–ü–æ–∏—Å–∫ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–æ –º–µ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—é –≤ –ì—Ä—É–∑–∏–∏",
#     generic_description="–ò—â–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–º—É —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—é –≤ –ì—Ä—É–∑–∏–∏, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å, —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–∫—Ä—ã—Ç—ã–µ —É—Å–ª–æ–≤–∏—è —Å—Ç—Ä–∞—Ö–æ–≤–æ–∫ –∏ –ø–æ–º–æ—á—å –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –≤–ª–∏—è–Ω–∏—è —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π."
# )

# send_bot_alert(test_message)

# import os, json
# from cryptography.fernet import Fernet
# from dotenv import load_dotenv
# from atoms import run_query, init_openai, respond_with_ai
# load_dotenv()
# from handlers import handle_flags, append_job_to_spreadsheet
# openai_client = init_openai()
# from models import MessageRequest
# from datetime import datetime


# msg = (
#     "–ü—Ä–∏–≤–µ—Ç! –ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ –º–µ–¥. —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—é –≤ –ì—Ä—É–∑–∏–∏? \n\n"
#     "–Ø –∏—â—É –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –∫–æ–º–ø–∞–Ω–∏–∏, –∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å, –∫–æ—Ç–æ—Ä—ã–π –∑–Ω–∞–µ—Ç –º–µ—Å—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫\n\n"
#     "–ü–æ—Ç–æ–º—É —á—Ç–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã –≤ —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö - —ç—Ç–æ –Ω–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã, –∞ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º, –∏ –ø–ª–∞—Ç–∏—Ç –∏–º —Å—Ç—Ä–∞—Ö–æ–≤–∞—è –∑–∞ –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏. –ê —è –∏—â—É —ç–∫—Å–ø–µ—Ä—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –Ω–∞–æ–±–æ—Ä–æ—Ç —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ –ø–æ–¥–≤–æ–¥–Ω—ã–µ –∫–∞–º–Ω–∏ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –∏ –æ–±—ä—è—Å–Ω–∏—Ç—å –∫–∞–∫—É—é –∏ –ø–æ—á–µ–º—É —Å—Ç—Ä–∞—Ö–æ–≤–∫—É –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å –∏ –∫–∞–∫ –µ–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –∏ –∫–∞–∫ –æ–±—â–∞—Ç—å—Å—è —Å–æ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π\n\n"
#     "–î–µ–ª–∞—Ç—å —Å–≤–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å—Ç—Ä–∞—Ö–æ–≤—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —É—Å–ª–æ–∂–Ω—è—é—Ç —É—Å–ª–æ–≤–∏—è –∏ –¥–æ–≥–æ–≤–æ—Ä, –∏ —Å–æ–∑–¥–∞—é—Ç —Å–∫—Ä—ã—Ç—ã–µ –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–∂–Ω–æ –≤—ã—è—Å–Ω–∏—Ç—å –¥–∞–∂–µ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n\n"
#     "–¢—É—Ç –Ω—É–∂–µ–Ω –∏–º–µ–Ω–Ω–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞—Ö–æ–≤—ã–º–∏ –Ω–æ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∏—Ö"
# )

# test_message = MessageRequest(
#     id=66539,
#     created_at=datetime.fromisoformat("2025-07-22 08:57:56.517"),
#     processed=False,
#     makes_sense=True,
#     flags=[],
#     group_link="https://t.me/health_ge",
#     group_name="–ú–µ–¥–∏—Ü–∏–Ω–∞ üíä –ì—Ä—É–∑–∏—è",
#     tg_user_id=240046008,
#     tg_user_name="q_pokrovsky",
#     msg=msg,
#     app_url="tg://user?id=240046008",
#     generic_title="–ü–æ–∏—Å–∫ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–æ –º–µ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—é –≤ –ì—Ä—É–∑–∏–∏",
#     generic_description="–ò—â–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–º—É —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—é –≤ –ì—Ä—É–∑–∏–∏, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å, —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–∫—Ä—ã—Ç—ã–µ —É—Å–ª–æ–≤–∏—è —Å—Ç—Ä–∞—Ö–æ–≤–æ–∫ –∏ –ø–æ–º–æ—á—å –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –≤–ª–∏—è–Ω–∏—è —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π."
# )



# handle_flags(test_message, openai_client)
# print(test_message.flags)

# for flag in test_message.flags:
#     append_job_to_spreadsheet(test_message)





# FERNET_KEY = os.getenv("FERNET_KEY")
# fernet = Fernet(FERNET_KEY)

# def _get_valid():
#     return run_query("""
#     SELECT msg, created_at, group_name, id
#     FROM qualified_messages
#     WHERE group_name IN (
        # '–¢–ë–ò–õ–ò–°–ò üá¨üá™ –ß–ê–¢ | –ì—Ä—É–∑–∏—è',
        # '–ë–ê–¢–£–ú–ò „Ääüá¨üá™ü¶Ñ„Äã–ß–ê–¢ | –ì—Ä—É–∑–∏—è',
        # '–ö–æ–±—É–ª–µ—Ç–∏ live —á–∞—Ç üá¨üá™',
        # '–°–ê–ë–£–†–¢–ê–õ–û | –¢–±–∏–ª–∏—Å–∏',
        # '–í–ê–ö–ï | –¢–±–∏–ª–∏—Å–∏'
#     )
#     ORDER BY created_at
#     """, (), fetch_all=True)

# valid = _get_valid()

# rate_prompt = f"""
# –¢—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram.
# –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —É—Å–ª—É–≥—É, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, —Ç–æ–≤–∞—Ä –∏–ª–∏ —á—Ç–æ-—Ç–æ, —á—Ç–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç —è–≤–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞—Ç—å –ø–ª–∞—Ç–Ω—É—é —É—Å–ª—É–≥—É.

# 1. –°–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ, –Ω–∞—Ä–∫–æ—Ç–∏–∫–∞—Ö, –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–µ –∏–ª–∏ –ª—é–±—É—é –¥—Ä—É–≥—É—é –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã.
# 2. –°–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è —Ä–µ–∫–ª–∞–º–æ–π –∏–ª–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ–º —É—Å–ª—É–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫—É–ø–∏—Ç—å –∏–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥–∏ –±–µ–∑ —è–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞), –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã.

# –û—Ç–≤–µ—Ç—å **true**, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ –∏ —è–≤–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É—Å–ª—É–≥—É, –∫–æ–Ω—Ç–∞–∫—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, —Ç–æ–≤–∞—Ä –∏–ª–∏ —É—Å–ª—É–≥—É —Å —á–µ—Ç–∫–∏–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é –ø–æ–º–æ—â—å.
# –û—Ç–≤–µ—Ç—å **false**, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–µ—Ç–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É—Å–ª—É–≥—É –∏–ª–∏ –Ω–µ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞—Ç—å –ø–ª–∞—Ç–Ω—É—é —É—Å–ª—É–≥—É, –∞ —Ç–∞–∫–∂–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–≤—è–∑–∞–Ω–æ —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π, –Ω–∞—Ä–∫–æ—Ç–∏–∫–∞–º–∏, –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ–º –∏–ª–∏ —Ä–µ–∫–ª–∞–º–æ–π.

# –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ **true** –∏–ª–∏ **false** –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è:
# """


# valid_messages = []

# # Function to process each message through GPT
# for msg in valid:
#     # Modify the prompt to fit the new classification categories
#     prompt = rate_prompt + f"\n\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{msg.get('msg')}"
    
#     # Process the message through GPT
#     res, in_price, out_price = respond_with_ai(
#         prompt,
#         openai_client,
#         500,
#         "gpt-4.1-mini"
#     )
    
#     # Handle the response: If it's classified as a valid service request, store the result
#     if res.lower() != 'false':  # Any non-False classification
#         print(f"Classified message: {msg.get('msg')[:100]}")
#         valid_messages.append({
#             "msg": msg.get("msg"),
#             "classification": res,
#             "date": str(msg.get("created_at")),
#             "group": msg.get("group_name"),
#             "id": msg.get("id")
#         })

# # Save the valid classified messages to a JSON file
# with open('valid_messages_true.json', 'w', encoding='utf-8') as json_file:
#     json.dump(valid_messages, json_file, ensure_ascii=False, indent=4)


# import pandas as pd
# import json

# niches = [
#     "–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
#     "–¢—É—Ä–∏–∑–º, —ç–∫—Å–∫—É—Ä—Å–∏–∏, —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –≤–æ–¥–∏—Ç–µ–ª—å",
#     "–õ–æ–≥–∏—Å—Ç–∏–∫–∞, –¥–æ—Å—Ç–∞–≤–∫–∞, –ø–æ—Å—ã–ª–∫–∏",
#     "–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –∞–≤—Ç–æ, –∂–∏–∑–Ω–∏, —Å—Ç—Ä–∞—Ö–æ–≤—ã–µ —É—Å–ª—É–≥–∏",
#     "–†–µ–º–æ–Ω—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏",
#     "–ê—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, —Å–∫—É—Ç–µ—Ä–∞, –º–æ–ø–µ–¥–∞",
#     "–ê—Ä–µ–Ω–¥–∞, –ø—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
#     "–£–±–æ—Ä–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä, –∫–ª–∏–Ω–∏–Ω–≥, –≤—ã–≤–æ–∑ –º—É—Å–æ—Ä–∞",
#     "–†–µ–º–æ–Ω—Ç –¥–æ–º–∞, –∫–≤–∞—Ä–∏—Ç—Ä—ã, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏",
#     "–û–±–º–µ–Ω –¥–µ–Ω–µ–≥, –¥–µ–Ω–µ–∂–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã",
#     "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∏ –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏",
#     "–£—Å–ª—É–≥–∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞, –ò–ü, –±–µ–∑–Ω–µ—Å",
#     "–†–µ–º–æ–Ω—Ç –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏",
#     "–ü—Ä–æ–¥–∞–∂–∞, –∞—Ä–µ–Ω–¥–∞ –∏ –ø–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤",
#     "–ñ–∏–≤–æ—Ç–Ω—ã–µ, —É—Å–ª—É–≥–∏ –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö",
#     "–ö—Ä–æ–π, —É—Å–ª—É–≥–∏ —à–≤–µ–∏, —Ç–µ–∫—Å—Ç–∏–ª—å",
#     "–ë—å—é—Ç–∏ —É—Å–ª—É–≥–∏, –∫—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ",
#     "–ú–µ–¥–∏—Ü–∏–Ω–∞, –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏",
#     "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ, –∫–µ–π—Ç–µ—Ä–∏–Ω–≥, –≤–µ–¥—É—â–∏–π"
# ]

# with open('valid_messages_true.json', 'r', encoding='utf-8') as file:
#     data = json.load(file)

# df = pd.DataFrame(data)

# def build_category_prompt(categories, msg):
#     # Create numbered list from array
#     categories_list = '\n'.join([f"{i}. {c}" for i, c in enumerate(categories)])
#     prompt = f"""
# –¢—ã —Å–∏—Å—Ç–µ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏. –î–ª—è –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∏–∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ. –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ –æ—Ç—Ä–∞–∂–∞—Ç—å —Å–º—ã—Å–ª –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É—Å–ª—É–≥—É –∏–ª–∏ —Ç–æ–≤–∞—Ä. –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞, –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.
# –í—ã–±–µ—Ä–∏ '–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' (–Ω–æ–º–µ—Ä 0), –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 

# –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:
# {categories_list}

# –°–æ–æ–±—â–µ–Ω–∏–µ:
# {msg}
# """
#     return prompt


# def detect_niche(msg):
#     prompt = build_category_prompt(niches, msg)
#     res, *_ = respond_with_ai(
#         prompt,
#         openai_client,
#         150,
#         "gpt-4.1-mini"
#     )
#     print(res)
#     return res.strip()

# df["niche"] = df["msg"].apply(detect_niche)

# # Save result
# df.to_json('valid_messages_with_niche.json', orient='records', force_ascii=False, indent=2)

# with open('valid_messages_with_niche.json', 'r', encoding='utf-8') as file:
#     data = json.load(file)

# df = pd.DataFrame(data)

# df['category_name'] = df['niche'].apply(lambda x: niches[int(x)])

# # Count
# cat_counts = df['category_name'].value_counts()


# filtered = []

# for i, row in df.iterrows():
#     if niches[int(row['niche'])] in [
#         "–¢—É—Ä–∏–∑–º, —ç–∫—Å–∫—É—Ä—Å–∏–∏, —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –≤–æ–¥–∏—Ç–µ–ª—å",
#         "–ê—Ä–µ–Ω–¥–∞, –ø—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
#         "–ê—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, —Å–∫—É—Ç–µ—Ä–∞, –º–æ–ø–µ–¥–∞",
#     ]:
#         filtered.append({
#             "msg": row["msg"],
#             "category_name": row["category_name"],
#             "date": row["date"],
#             "value": 0
#         })

# with open('filtered_valid_messages_niche.json', 'w', encoding='utf-8') as f:
#     json.dump(filtered, f, ensure_ascii=False, indent=2)



# with open('filtered_valid_messages_with_named_niche.json', 'r', encoding='utf-8') as file:
#     data = json.load(file)


# filtered_df = pd.DataFrame(data)

# # Count messages per category
# counts = filtered_df.groupby("category_name")["msg"].count()

# # Sum "value" per category (if you start changing value >0)
# sums = filtered_df.groupby("category_name")["value"].sum()

# stats = filtered_df.groupby("category_name").agg(
#     count=("msg", "count"),
#     value_sum=("value", "sum")
# )
# stats["avg_value"] = stats["value_sum"] / stats["count"]
# stats["lead_price"] = stats["avg_value"] / 200
# stats["expected_revenue"] = stats["value_sum"] / 200
# print(stats)


# with open('filtered_valid_messages_niche_with_values.json', 'r', encoding='utf-8') as f:
#     data = json.load(f)

# df = pd.DataFrame(data)

# # Extract date (YYYY-MM-DD)
# df['date_only'] = df['date'].str[:10]

# # Filter for July 18, 2025
# df_filtered = df[df['date_only'] == '2025-07-18']

# # Sum value per category for this date
# cat_sums = df_filtered.groupby('category_name')['value'].sum()

# print(cat_sums)